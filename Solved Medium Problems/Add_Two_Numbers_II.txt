/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ArrayDeque<Integer> stack1 = new ArrayDeque<Integer>();
        ArrayDeque<Integer> stack2 = new ArrayDeque<Integer>();
        ArrayDeque<Integer> output = new ArrayDeque<Integer>();
        ListNode current1 = l1;
        ListNode current2 = l2;
        while (current1 != null) {
            stack1.push(current1.val);
            current1  = current1.next;
        }
        while (current2 != null) {
            stack2.push(current2.val);
            current2 = current2.next;
        }
        boolean carry = false;
        while (!stack1.isEmpty() && !stack2.isEmpty()) {
            int val1 = stack1.pop();
            int val2 = stack2.pop();
            int sum = val1 + val2;
            if (carry) {
                sum++;
                carry = false;
            }
            if (sum >= 10) {
                carry = true;
                output.push(sum % 10);
            } else {
                output.push(sum);
            }
        }
        while (!stack1.isEmpty()) {
            int currentval = stack1.pop();
            if (carry) {
                currentval++;
                carry = false;
            }
            if (currentval >= 10) {
                carry = true;
                output.push(currentval % 10);
            } else {
                output.push(currentval);
            }
        }
        while (!stack2.isEmpty()) {
            int currentval = stack2.pop();
            if (carry) {
                currentval++;
                carry = false;
            }
            if (currentval >= 10) {
                carry = true;
                output.push(currentval % 10);
            } else {
                output.push(currentval);
            }
        }
        if (carry) output.push(1);
        
        ListNode answer  = new ListNode(output.pop());
        ListNode n = answer;
        while (!output.isEmpty()) {
            n.next = new ListNode(output.pop());
            n = n.next;
        }
        return answer;
    }
}