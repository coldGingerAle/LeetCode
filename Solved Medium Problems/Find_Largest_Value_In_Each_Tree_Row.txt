/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    private class Node {
        TreeNode treenode;
        int level;
        public Node(TreeNode treenode, int level) {
            this.treenode = treenode;
            this.level = level;
        }
    }
    
    public List<Integer> largestValues(TreeNode root) {
        Queue<Node> queue = new ArrayDeque<Node>();
        ArrayList<Integer> answer = new ArrayList<Integer>();
        ArrayList<ArrayList<Integer>> list = new ArrayList<ArrayList<Integer>>();
        if (root == null) return answer;
        list.add(new ArrayList<Integer>());
        queue.add(new Node(root, 0));
        while (!queue.isEmpty()) {
            Node n = queue.remove();
            if (n.level > list.size() - 1) {
                list.add(new ArrayList<Integer>());
            }
            list.get(n.level).add(n.treenode.val);
            if (n.treenode.left != null) queue.add(new Node(n.treenode.left, n.level + 1));
            if (n.treenode.right != null) queue.add(new Node(n.treenode.right, n.level + 1));
        }
        for (ArrayList<Integer> l : list) {
            int max = l.get(0);
            for (int i = 1; i < l.size(); i++) {
                int current = l.get(i);
                if (current > max) max = current;
            }
            answer.add(max);
        }
        return answer;
    }
}