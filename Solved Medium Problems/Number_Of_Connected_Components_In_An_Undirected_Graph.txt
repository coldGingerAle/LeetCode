class Solution {
    public int countComponents(int n, int[][] edges) {
        boolean[] marked = new boolean[n];
        List<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<Integer>());
        }
        for (int[] pair : edges) {
            int a = pair[0];
            int b = pair[1];
            graph.get(a).add(b);
            graph.get(b).add(a);
        }
        int index = 0;
        for (int i = 0; i < n; i++) {
            if (!marked[i]) {
                dfs(graph, i, marked, index);
                index++;
            }
        }
        return index;
    }
    
    public void dfs(List<ArrayList<Integer>> graph, Integer root, boolean[] marked, int index) {
        marked[root] = true;
        for (Integer i : graph.get(root)) {
            if (!marked[i]) {
                dfs(graph, i, marked, index);
            }
        }
    }
}