class Solution {
    
    private class Pair implements Comparable<Pair> {
        char c;
        int count;
        public Pair(char c, int count) {
            this.c = c;
            this.count = count;
        }
        
        public int compareTo(Pair other) {
            return other.count - count;
        }
    }
    
    public String frequencySort(String s) {
        HashMap<Character, Integer> hm = new HashMap<Character, Integer>();
        for (int i = 0; i < s.length(); i++) {
            char current = s.charAt(i);
            if (hm.containsKey(current)) {
                int val = (Integer)hm.get(current);
                hm.put(current, val + 1);
            } else {
                hm.put(current, 1);
            }
        }
        ArrayList<Pair> list = new ArrayList<Pair>();
        for (Map.Entry m : hm.entrySet()) {
            char c = (Character)m.getKey();
            int count = (Integer)m.getValue();
            list.add(new Pair(c, count));
        }
        Collections.sort(list);
        
        StringBuilder sb = new StringBuilder("");
        for (Pair p : list) {
            for (int i = 0; i < p.count; i++) {
                sb.append(p.c);
            }
        }
        return sb.toString();
    }
}